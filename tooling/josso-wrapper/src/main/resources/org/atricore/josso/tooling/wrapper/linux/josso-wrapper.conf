# ------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#********************************************************************
# Wrapper Properties
#********************************************************************
#
# ENVIRONMENT VARIABLES THAT MUST BE DEFINED FOR THE WINDOWS SERVICE ACCOUNT!
# (replace variable values with your environment settings)
#
# KARAF_HOME=C:\\atricore\\josso-ee-2.2.0
# KARAF_BASE=C:\\atricore\\josso-ee-2.2.0
# KARAF_DATA=C:\\atricore\\josso-ee-2.2.0\\data
# JAVA_HOME=C:\\atricore\\Java\\jdk1.6.0_17

KARAF_HOME=${karaf.home}
KARAF_BASE=${karaf.base}
KARAF_DATA=${karaf.data}
JAVA_HOME=${java.home}

# Java Application
wrapper.working.dir=${KARAF_BASE}
wrapper.java.command=${JAVA_HOME}/bin/java
wrapper.java.app.mainclass=org.atricore.idbus.kernel.common.boot.MainWrapper
wrapper.java.classpath.1=${KARAF_HOME}/lib/karaf.jar
wrapper.java.classpath.2=${KARAF_BASE}/lib/idbus.jar
wrapper.java.classpath.3=${KARAF_HOME}/lib/karaf-jaas-boot.jar
#wrapper.java.library.path.1=${KARAF_BASE}/lib/

# Application Parameters.  Add parameters as needed starting from 1
#wrapper.app.parameter.1=

# JVM Parameters
# note that n is the parameter number starting from 1.
wrapper.java.additional.1=-Dkaraf.home=${KARAF_HOME}
wrapper.java.additional.2=-Dkaraf.base=${KARAF_BASE}
wrapper.java.additional.3=-Dkaraf.data=${KARAF_DATA}
wrapper.java.additional.4=-Dcom.sun.management.jmxremote
wrapper.java.additional.5=-Dkaraf.startLocalConsole=false
wrapper.java.additional.6=-Dkaraf.startRemoteShell=true
wrapper.java.additional.7=-Djava.endorsed.dirs=${JAVA_HOME}/jre/lib/endorsed;${JAVA_HOME}/lib/endorsed;${KARAF_HOME}/lib/endorsed
wrapper.java.additional.8=-Djava.ext.dirs=${JAVA_HOME}/jre/lib/ext;${JAVA_HOME}/lib/ext;${KARAF_HOME}/lib/ext
wrapper.java.additional.9=-Dderby.system.home=${KARAF_DATA}/derby
wrapper.java.additional.10=-XX:MaxPermSize=512m

wrapper.app.env.KARAF_BASE=${karaf.base}
wrapper.app.env.KARAF_DATA=${karaf.data}
wrapper.app.env.KARAF_HOME=${karaf.home}
wrapper.app.env.JAVA_HOME=${java.home}

# Uncomment to enable jmx
#wrapper.java.additional.n=-Dcom.sun.management.jmxremote.port=1616
#wrapper.java.additional.n=-Dcom.sun.management.jmxremote.authenticate=false
#wrapper.java.additional.n=-Dcom.sun.management.jmxremote.ssl=false

# Uncomment to enable YourKit profiling
#wrapper.java.additional.n=-Xrunyjpagent

# Uncomment to enable remote debugging
#wrapper.java.additional.n=-Xdebug -Xnoagent -Djava.compiler=NONE
#wrapper.java.additional.n=-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005

# Initial Java Heap Size (in MB)
#wrapper.java.initmemory=3

# Maximum Java Heap Size (in MB)
wrapper.java.maxmemory=768

# In millis, wait for JOSSO 5 minutes!
wrapper.startup.timeout=300000

#********************************************************************
# With the this property one may control how the wrapper and the application are coupeled.
#********************************************************************
# LOOSE :                    application will continue running when the controller is terminated and vice versa
# TIGHT:                      application will terminate if controller terminates and vice versa (default)
# WRAPPER:               controller will be terminated if the application terminates. Application will not be terminated if the controller is terminated
# APPLICATION:        application will be terminated if the contrloler terminates. Controller will not be terminated if the application is terminated

#wrapper.control=TIGHT

#********************************************************************
# Wrapper Stop Configuration
#********************************************************************
#wrapper.stop.conf=

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Format of output for the console.  (See docs for formats)
wrapper.console.format=PM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=TRACE

# Log file to use for wrapper output logging.
wrapper.logfile=${KARAF_DATA}/log/wrapper.log

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=LPTM

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=TRACE

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=10m

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=5

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper POSIX Properties
#********************************************************************
# Name of the service
wrapper.ntservice.name=${name}

# Mode in which the service is installed.  AUTO_START or DEMAND_START
wrapper.ntservice.starttype=AUTO_START

# Display name of the service
wrapper.ntservice.displayname=${displayName}

# Description of the service
wrapper.ntservice.description=${description}

#wrapper.update_rc = start 20 2 3 4 . start 30 5 . stop 80 0 1 6

#wrapper.daemon.run_level_dir=/etc/rcX.d

# Directory in which to create and execute daemon init scripts.
#wrapper.daemon.dir=/etc/init.d

# Directory where to store the wrapper.pidfile, if this property is not defined, in case the application is started as a daemon.
wrapper.daemon.pid.dir=/var/run/josso2

# Velocity template file for generating daemon init scripts.
#wrapper.daemon.template

#  Directory in which to create K... and S... links
#wrapper.daemon.run_level_dir=